{"version":3,"file":"questionnaire.min.js","sources":["../src/questionnaire.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * AMD code for the frequently used comments chooser for the marking guide grading form.\n *\n * @module     mod_verbalfeedback/questionnaire\n * @class      view\n * @copyright  2020 Kevin Tippenhauer <kevin.tippenhauer@bfh.ch>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\ndefine(['jquery',\n    'core/templates',\n    'core/notification',\n    'core/ajax',\n    'core/str',\n    'core/modal_factory',\n    'core/modal_events'\n], function($, Templates, Notification, Ajax, Str, ModalFactory, ModalEvents) {\n\n    var responses = [];\n    var questionnaire = function() {\n        this.registerEvents();\n\n        // Prefill responses array.\n        $('[data-region=\"question-row\"]').each(function() {\n            responses[$(this).data('criterionid')] = {\n                criterionid: $(this).data('criterionid'),\n                value: null,\n                studentcomment: \"\",\n                privatecomment: \"\"\n            };\n        });\n\n        let questionnaireTable = $('[data-region=\"questionnaire\"]');\n\n        if(questionnaireTable.data('preview') == true) { // dont use '===' as $preview is '1'  not 'true'.\n          // do not look for existing submission on preview page\n          return;\n        }\n\n        let fromUser = questionnaireTable.data('fromuserid');\n        let toUser = questionnaireTable.data('touserid');\n        let verbalfeedbackId = questionnaireTable.data('verbalfeedbackid');\n        let submissionId = questionnaireTable.data('submissionid');\n\n        let promises = Ajax.call([\n            {\n                methodname: 'mod_verbalfeedback_get_responses',\n                args: {\n                    verbalfeedbackid: verbalfeedbackId,\n                    fromuserid: fromUser,\n                    touserid: toUser,\n                    submissionid: submissionId\n                }\n            }\n        ]);\n\n        promises[0].done(function(result) {\n            $.each(result.responses, function() {\n              let response = this;\n                responses[response.criterionid]['criterionid'] = response.criterionid;\n                responses[response.criterionid]['value'] = response.value;\n                responses[response.criterionid]['studentcomment'] = response.studentcomment;\n                responses[response.criterionid]['privatecomment'] = response.privatecomment;\n\n                $('[data-region=\"question-row\"]').each(function() {\n                    if ($(this).data('criterionid') === response.criterionid) {\n                      let options = $(this).find('.scaleoption');\n                        if (options) {\n                            options.each(function() {\n                                // Mark selected option as selected.\n                                let selected = $(this).find('label');\n                                if (selected.data('value') === response.value) {\n                                    selected.removeClass('badge-secondary');\n                                    selected.removeClass('badge-info');\n                                    selected.addClass('badge-success');\n                                } else if (selected.data('value') === \"\" && response.value === null) {\n                                    selected.removeClass('badge-secondary');\n                                    selected.removeClass('badge-info');\n                                    selected.addClass('badge-success');\n                                }\n                            });\n                        }\n                        let studentcomment = $(this).find('.student-comment.editor_atto_content');\n                        if (studentcomment && response.studentcomment !== '') {\n                            studentcomment.html(response.studentcomment);\n                        }\n                        let privatecomment = $(this).find('.private-comment.editor_atto_content');\n                        if (privatecomment && response.privatecomment !== '') {\n                            privatecomment.html(response.privatecomment);\n                        }\n                    }\n                });\n            });\n        }).fail(Notification.exception);\n    };\n\n    questionnaire.prototype.registerEvents = function() {\n        $('.scaleoption').click(function(e) {\n            e.preventDefault();\n\n            let row = $(this).parents('[data-region=\"question-row\"]');\n            let options = row.find('label');\n\n            // Deselect the option that has been selected.\n            $.each(options, function() {\n                if ($(this).hasClass('badge-success')) {\n                    $(this).removeClass('badge-success');\n                    $(this).addClass('badge-secondary');\n\n                    var forId = $(this).attr('for');\n                    var optionRadio = $(\"#\" + forId);\n                    optionRadio.removeAttr('checked');\n                }\n            });\n\n            // Mark selected option as selected.\n            let selected = $(this).find('label');\n            selected.removeClass('badge-secondary');\n            selected.removeClass('badge-info');\n            selected.addClass('badge-success');\n\n            // Mark hidden radio button as checked.\n            let radio = $(\"#\" + selected.attr('for'));\n            radio.attr('checked', 'checked');\n            let criterionid = row.data('criterionid');\n\n\n\n            // Add this selected value to the array of responses.\n            if (selected.data('value') === \"\") { // === is necessary because == \"0\" equals true;\n                responses[criterionid]['value'] = null;\n            } else {\n                responses[criterionid]['value'] = selected.data('value');\n            }\n        });\n\n        $('.scaleoptionlabel').hover(function(e) {\n            e.preventDefault();\n\n            if (!$(this).hasClass('badge-success')) {\n                if ($(this).hasClass('badge-secondary')) {\n                    $(this).removeClass('badge-secondary');\n                    $(this).addClass('badge-info');\n                } else {\n                    $(this).addClass('badge-secondary');\n                    $(this).removeClass('badge-info');\n                }\n            }\n        });\n\n        $('.detail-scaleoption').click(function(e) {\n            e.preventDefault();\n\n            let row = $(this).parents('[data-region=\"detailed-rating\"]');\n            let value = $(this).find('.detail-scaleoptionlabel').data(\"value\");\n            let studentComment = row.find('.student-comment.editor_atto_content');\n            studentComment.append(\"<ul><li>\" + value + \"</li></ul>\");\n\n        });\n\n        $('.detail-scaleoptionlabel').hover(function(e) {\n            e.preventDefault();\n\n            if (!$(this).hasClass('badge-success')) {\n                if ($(this).hasClass('badge-secondary')) {\n                    $(this).removeClass('badge-secondary');\n                    $(this).addClass('badge-info');\n                } else {\n                    $(this).addClass('badge-secondary');\n                    $(this).removeClass('badge-info');\n                }\n            }\n        });\n\n        $(\"#save-feedback\").click(function() {\n            saveResponses(false);\n        });\n\n        $(\"#submit-feedback\").click(function() {\n            saveResponses(true);\n        });\n\n        $(\".btn-detail-rating\").click(function(e) {\n            e.preventDefault();\n            let row = $(this).parents('[data-region=\"question-row\"]');\n            let detailedRating = row.find(\".detailed-rating\");\n            if(detailedRating.hasClass(\"hidden\")) {\n                detailedRating.removeClass(\"hidden\");\n                $(this).html(\"âˆ’\");\n            } else {\n                detailedRating.addClass(\"hidden\");\n                $(this).html(\"+\");\n            }\n\n        });\n    };\n\n    /**\n     * Save the responses.\n     *\n     * @param {boolean} finalise\n     */\n    function saveResponses(finalise) {\n\n        $('.student-comment').each(function() {\n            let row = $(this).parents('[data-region=\"question-row\"]');\n            let comment = row.find('.student-comment.editor_atto_content').html();\n            comment = (comment == \"<p dir=\\\"ltr\\\" style=\\\"text-align: left;\\\"><br></p>\" ? \"\": comment); // drop empty comments\n            responses[row.data('criterionid')]['studentcomment'] = comment;\n        });\n        $('.private-comment').each(function() {\n            let row = $(this).parents('[data-region=\"question-row\"]');\n            let comment = row.find('.private-comment.editor_atto_content').html();\n            comment = (comment == \"<p dir=\\\"ltr\\\" style=\\\"text-align: left;\\\"><br></p>\" ? \"\": comment); // drop empty comments\n            responses[row.data('criterionid')]['privatecomment'] = comment;\n        });\n\n        let questionnaireTable = $('[data-region=\"questionnaire\"]');\n        let toUser = questionnaireTable.data('touserid');\n        let toUserFullname = questionnaireTable.data('tousername');\n        let verbalfeedbackId = questionnaireTable.data('verbalfeedbackid');\n        let submissionId = questionnaireTable.data('submissionid');\n        let anonymous = questionnaireTable.data('anonymous');\n\n        if (anonymous && finalise) {\n            // Show confirmation dialogue to anonymise the feedback responses.\n            let messageStrings = [\n                {\n                    key: 'finaliseanonymousfeedback',\n                    component: 'mod_verbalfeedback'\n                },\n                {\n                    key: 'confirmfinaliseanonymousfeedback',\n                    component: 'mod_verbalfeedback',\n                    param: {\n                        'name': toUserFullname\n                    }\n                }\n            ];\n\n            Str.get_strings(messageStrings, 'mod_verbalfeedback').done(function(messages) {\n                showConfirmationDialogue(messages[0], messages[1], verbalfeedbackId, submissionId, toUser, responses, finalise);\n            }).fail(Notification.exception);\n        } else {\n            // Just save the responses.\n            submitResponses(verbalfeedbackId, submissionId, toUser, responses, finalise);\n        }\n    }\n\n    /**\n     * Send the responses to the server.\n     *\n     * @param {number} verbalfeedbackId\n     * @param {number} submissionId\n     * @param {number} toUser\n     * @param {array} responses\n     * @param {boolean} finalise\n     */\n    function submitResponses(verbalfeedbackId, submissionId, toUser, responses, finalise) {\n        let responseObjects = [];\n        for (tuple of Object.entries(responses)) {\n          if (tuple[1] !== null) {\n            responseObjects.push(tuple[1]);\n          }\n        }\n\n        let promises = Ajax.call([\n            {\n                methodname: 'mod_verbalfeedback_save_responses',\n                args: {\n                    verbalfeedbackid: verbalfeedbackId,\n                    submissionid: submissionId,\n                    touserid: toUser,\n                    responses: responseObjects,\n                    complete: finalise\n                }\n            }\n        ]);\n\n        promises[0].done(function(response) {\n          // console.log(response);\n          let messageStrings = [\n                {\n                    key: 'responsessaved',\n                    component: 'mod_verbalfeedback'\n                },\n                {\n                    key: 'errorresponsesavefailed',\n                    component: 'mod_verbalfeedback'\n                }\n            ];\n\n            Str.get_strings(messageStrings).done(function(messages) {\n              let notificationData = {};\n                if (response.result) {\n                    notificationData.message = messages[0];\n                    notificationData.type = \"success\";\n                } else {\n                    notificationData.message = messages[1];\n                    notificationData.type = \"error\";\n                }\n                Notification.addNotification(notificationData);\n            }).fail(Notification.exception);\n\n            window.location = response.redirurl;\n        }).fail(Notification.exception);\n    }\n\n    /**\n     * Renders the confirmation dialogue to submit and finalise the responses.\n     *\n     * @param {string} title\n     * @param {string} confirmationMessage\n     * @param {number} verbalfeedbackId\n     * @param {number} submissionId\n     * @param {number} toUser\n     * @param {Array} responses\n     * @param {boolean} finalise\n     */\n    function showConfirmationDialogue(title, confirmationMessage, verbalfeedbackId, submissionId, toUser, responses, finalise) {\n      let confirmButtonTextPromise = Str.get_string('finalise', 'mod_verbalfeedback');\n        let confirmModalPromise = ModalFactory.create({\n            title: title,\n            body: confirmationMessage,\n            large: true,\n            type: ModalFactory.types.SAVE_CANCEL\n        });\n        $.when(confirmButtonTextPromise, confirmModalPromise).done(function(confirmButtonText, modal) {\n            modal.setSaveButtonText(confirmButtonText);\n\n            // Display the dialogue.\n            modal.show();\n\n            // On hide handler.\n            modal.getRoot().on(ModalEvents.hidden, function() {\n                // Empty modal contents when it's hidden.\n                modal.setBody('');\n            });\n\n            modal.getRoot().on(ModalEvents.save, function() {\n                submitResponses(verbalfeedbackId, submissionId, toUser, responses, finalise);\n            });\n        });\n\n    }\n\n    return questionnaire;\n});\n"],"names":["define","$","Templates","Notification","Ajax","Str","ModalFactory","ModalEvents","responses","questionnaire","registerEvents","each","this","data","criterionid","value","studentcomment","privatecomment","questionnaireTable","fromUser","toUser","verbalfeedbackId","submissionId","call","methodname","args","verbalfeedbackid","fromuserid","touserid","submissionid","done","result","response","options","find","selected","removeClass","addClass","html","fail","exception","saveResponses","finalise","row","parents","comment","toUserFullname","messageStrings","key","component","param","get_strings","messages","title","confirmationMessage","confirmButtonTextPromise","get_string","confirmModalPromise","create","body","large","type","types","SAVE_CANCEL","when","confirmButtonText","modal","setSaveButtonText","show","getRoot","on","hidden","setBody","save","submitResponses","showConfirmationDialogue","responseObjects","tuple","Object","entries","push","complete","notificationData","message","addNotification","window","location","redirurl","prototype","click","e","preventDefault","hasClass","forId","attr","removeAttr","hover","append","detailedRating"],"mappings":"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"}